name: Destroy WordPress on EC2

on:
  workflow_dispatch:

jobs:
  terraform_destroy:
    name: "Destroy EC2 with Terraform"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ALLOWED_IPS: ${{ secrets.ALLOWED_IPS }}
      AWS_KEY_NAME: ${{ secrets.AWS_KEY_NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get IP-address GitHub Actions runner
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Add IP to Security Group for SSH
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init with S3 Backend
        run: |
          terraform init \
            -backend-config="bucket=my-first-remote-state" \
            -backend-config="key=nginx/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=terraform-locks"
        working-directory: terraform

      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve \
            -var "allowed_ips=${ALLOWED_IPS}" \
            -var "key_name=${{ env.AWS_KEY_NAME }}"
        working-directory: terraform
        env:
          ALLOWED_IPS: ${{ secrets.ALLOWED_IPS }}
          AWS_KEY_NAME: ${{ secrets.AWS_KEY_NAME }}

      - name: Delete IP runner from Security Group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
