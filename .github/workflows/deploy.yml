name: Deploy WordPress on EC2

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'ansible/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform: Create/Update EC2 & SG"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ALLOWED_IPS: ${{ secrets.ALLOWED_IPS }}
      AWS_KEY_NAME: ${{ secrets.AWS_KEY_NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init -lock=false
        working-directory: terraform

      - name: Terraform Apply (create/update resources)
        id: apply
        run: |
          terraform apply -auto-approve -lock=false \
            -var "allowed_ips=${ALLOWED_IPS}" \
            -var "key_name=${{ env.AWS_KEY_NAME }}"
        working-directory: terraform

      - name: Export EC2 Public IP
        id: get_ip
        run: echo "public_ip=$(terraform output -raw nginx_public_ip)" >> $GITHUB_ENV
        working-directory: terraform

      - name: Export Security Group ID
        id: get_sg
        run: echo "sg_id=$(terraform output -raw nginx_sg_id)" >> $GITHUB_ENV
        working-directory: terraform

  ansible:
    name: "Ansible: Configure EC2"
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Runner Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Temporarily allow SSH
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ env.sg_id }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add EC2 to known_hosts
        run: ssh-keyscan -H ${{ env.public_ip }} >> ~/.ssh/known_hosts

      - name: Create Ansible inventory
        run: |
          mkdir -p ansible
          echo "webservers:" > ansible/inventory.yml
          echo "  hosts:" >> ansible/inventory.yml
          echo "    ${{ env.public_ip }}:" >> ansible/inventory.yml
          echo "      ansible_user: ubuntu" >> ansible/inventory.yml

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i ansible/inventory.yml ansible/wordpress_deploy.yml \
            --vault-password-file <(echo "${{ secrets.ANSIBLE_VAULT_PASS }}") \
            -e "db_root_password=${{ secrets.DB_ROOT_PASSWORD }}" \
            -e "db_password=${{ secrets.DB_PASSWORD }}"
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"

      - name: Remove temporary SSH access
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ env.sg_id }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
